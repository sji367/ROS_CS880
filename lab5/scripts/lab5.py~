# -*- coding: utf-8 -*-
"""
Created on Wed Mar 22 17:28:18 2017

@author: sji367
"""
import rospy
from geometry_msgs.msg import PoseStamped

class Lab5Solution():
    def newPose(self, WPT='A'):
        """takes in right and left wheel velocities and translates the to twist messages"""
	print 'New Pose {}'.format(WPT)
        new = PoseStamped()
        new.header.seq=1
        new.header.stamp.secs = rospy.get_rostime().to_sec()
        #new.header.stamp.nsecs = rospy.get_rostime().to_nsec()
        new.header.frame_id= 'map'
        
        new.pose.position.z = 0.0
        new.pose.orientation.x = 0.0
        new.pose.orientation.y = 0.0
        
        if WPT == 'A':
            print 'A'
            new.pose.position.x = -5.95
            new.pose.position.y = 4.15
            new.pose.orientation.z = -0.686
            new.pose.orientation.w = 0.727
            
        elif WPT == 'B':
            new.pose.position.x = -10.53
            new.pose.position.y = -5.52
            new.pose.orientation.z = -0.999
            new.pose.orientation.w = 0.005
            
        elif WPT == 'C':
            new.pose.position.x = -4.16
            new.pose.position.y = -5.51
            new.pose.orientation.z = 0.005
            new.pose.orientation.w = 0.999
            
        elif WPT == 'D':
            new.pose.position.x = -5.23
            new.pose.position.y = -7.59
            new.pose.orientation.z = -0.738
            new.pose.orientation.w = 0.674
            
        # Write a new twist message
        self.Pose = new
        
    def __init__(self, WPT):
        """ STUFF YOU MAY WANT TO USE"""
        rospy.init_node('lab5')
        #rospy.on_shutdown(self.shutdown())
        
        # loop rate
        r = rospy.Rate(50)

        self.Pose = PoseStamped()
        
        # publisher for twist messages
        self.cmd_pose = rospy.Publisher('/move_base_simple/goal', PoseStamped, queue_size=100)
        cntr =0
        # IN THIS LOOP ROS SENDS AND RECEIVES  
        while not rospy.is_shutdown():
            # When your trigger is activated, execute trajectory
            self.newPose(WPT.upper())
            self.cmd_pose.publish(self.Pose)
            r.sleep()
            cntr +=1
            if cntr>50:
                break
            
        return

WPT = raw_input('Pick yor waypoint (A,B,C,D): ')
l = Lab5Solution(WPT)
